<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Mental Safari]]></title>
  <link href="http://picodegallo.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://picodegallo.github.io/"/>
  <updated>2013-07-30T23:00:26-04:00</updated>
  <id>http://picodegallo.github.io/</id>
  <author>
    <name><![CDATA[Kristen Curtis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Artificial Intelligence? That's What She Said.]]></title>
    <link href="http://picodegallo.github.io/blog/2013/07/15/artificial-intelligence-thats-what-she-said/"/>
    <updated>2013-07-15T22:17:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/07/15/artificial-intelligence-thats-what-she-said</id>
    <content type="html"><![CDATA[<h2>Getting in the Mood</h2>


<p>
Having lived in Seattle for the better part of 6 years before moving to NY, I like to keep up on the lastest and greatest technology being developed in the tech haven that is Washington state. While Amazon is expanding and building new campuses in Seattle, and MSFT is attempting to maintain relevancy there, the University of Washington is housing two researchers armed with grant money to program an algorithm, code name: <a href="http://people.cs.umass.edu/~brun/pubs/pubs/Kiddon11.pdf">DEviaNT (Double Entendre via Noun Transfer),</a>  that analyzes harmless text to determine if adding &ldquo;That&rsquo;s what she said&rdquo; to the end of a given sentence makes it risque. As of now, the program has a 70% accuracy rating – which is expected to reach 99.6% in the next round of code refactoring.</p>

<hr>




<h2>Going Deep</h2>


<p>Digging through the project overview authored by the creators, I found that they had cited a Ruby gem called <a href="https://github.com/bvandenbos/twss"> &ldquo;TWSS&rdquo; </a> to pre-train their algorithm. Looking a bit more into what the gem does, I discovered that it intakes data via hpricot, compares that to a txt file of predetermined &ldquo;TWSS&rdquo; lines and a txt file of non-&ldquo;TWSS&rdquo; lines (my favorite of which is: &ldquo;I forgot about the baby monitor&rdquo;) and then writes the input to the associated file in order for the alorithm to learn. The gem then outputs &ldquo;TWSS&rdquo; if the input is relevant.</p>

<hr>




<h2>The Long Hard Run</h2>


<p>While the actual UW algorithm went above and beyond the gem&rsquo;s capabilities by translating assumptions about &ldquo;TWSS&rdquo; sentence usage to mathematical representations of &ldquo;noun sexiness&rdquo; and &ldquo;verb sexiness,&rdquo; it was still interesting to see that Ruby was at the core of all this research. It may all seem like fun and games to the reader, but the point of the research has far reaching consequences when viewed from the perspective of an AI researcher or developer. Natural human language has many nuances and subtleties that are difficult for a computer to detect. By building smarter models and algorithms that are able to diferentiate between language usage, we can ultimately build smarter programs and machines to usher us into the future we&rsquo;ve all been waiting for.*</p>

<p>*That future is basically robots and awesomeness in case you were wondering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Reframing Ruby – Part 2]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2/"/>
    <updated>2013-06-10T22:08:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2</id>
    <content type="html"><![CDATA[<h2> What the What with the Gmail </h2>


<p>After my first experiment with Ruby and Arduino, I wanted to try writing a sketch that would build off of the code I had written from the blinking LED test. Using the blinking LED as an indicator, I thought it would be interesting to see if I could get my Ardunio talking with Gmail to alert me if I had any unread inbox messages. After doing some research, I found a Ruby gem called Gmail that allows me to do just that.</p>

<hr>




<h2> Requiring the Right Gems </h2>


<p>Here we&rsquo;re going to set up the sketch with the gems we&rsquo;ll be running.</p>

<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require &lsquo;bundler/setup&rsquo;
</span><span class="line">require &lsquo;gmail&rsquo;
</span><span class="line">require &lsquo;dino&rsquo;
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2> Board in the USA </h2>


<p>Dino requires us to define our board, tell it that we&rsquo;ll be inputing and outputing data, and tell it that we&rsquo;re using a serial connection (since my Ardunio is hooked up via USB). Next, we&rsquo;ll be defining our LED variable, which should be easy since it was in the previous sketch.Note: Dino also offers a good directory full of example code for setting up any given component.</p>

<h4>Setting up dino</h4>


<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">board = Dino::Board.new(Dino::TxRx::Serial.new)
</span><span class="line">led = Dino::Components::Led.new(pin: 13, board: board)
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2> You've Got Mail </h2>


<p>In the next few lines of code we: call on Gmail to let us access our inbox, check if our inbox is empty, set the led variable to a resting state, and define a variable equal to the number of unread emails. Note: In the code listed below, you&rsquo;d actually pass in your real email address and password.
<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Gmail.connect(&ldquo;<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x75;&#x73;&#x65;&#114;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#117;&#x73;&#101;&#114;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a>&rdquo;, &ldquo;password&rdquo;) do |gmail|
<span class="line">led.off
</span><span class="line">puts &ldquo;Total Unread Emails: #{gmail.inbox.count(:unread)}&rdquo;
</span><span class="line">has_unread = gmail.inbox.count(:unread) !=0
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2>Ruby Slippers</h2>


<p>Now that we have access to our inbox, we can finish up this sketch by writing an if statement to blink our led when our inbox is not at zero.</p>

<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if has_unread != 0
</span><span class="line">[:on, :off].cycle do |switch|
</span><span class="line">led.send(switch)
</span><span class="line">sleep 0.5
</span><span class="line">end
</span><span class="line">end
</span><span class="line">end
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2>Next Steps</h2>


<p>I&rsquo;m hoping to take this further by:</p>

<ul><li>Writting in a delay and loop so that the sketch runs every 5-10 min</li> 
<li> Adding an rgbLED so that I can light up a red LED when the inbox is full and a green LED when the inbox is empty.</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Reframing Ruby – Part 1]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/09/mentally-reframing-ruby-part-1/"/>
    <updated>2013-06-09T15:53:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/09/mentally-reframing-ruby-part-1</id>
    <content type="html"><![CDATA[<h2> The Beginning </h2>


<p>Coming from a design background, I have a hard time understanding how something works or its purpose until I can see it applied to a real life situation. This is how I feel about learning Ruby. While I&rsquo;m becoming more familiar with the language day by day, I still needed an example of a practical application of it in order to wrap my head around when it&rsquo;s used.</p>

<p>In order to bring it all together, I decided to turn to an area I have a little bit of know-how in: physical computing. Ever since I was a kid, I&rsquo;ve wanted to take over the world – and that dream starts by having your very own robot army. While I don&rsquo;t have a large army to date, I have made a few small models with various microcontrollers, specifically with the ever popular Arduino. But, the Ardunio platform is based on a language (and environment) called Wiring, which is in turn based on C++ – quite a bit different from our pretty happy friend Ruby.</p>

<hr>


<h2> Experiment 1 </h2>


<p>So, I did a bit of research and found that someone had built a gem called dino last year for the exact purpose of running ruby sketches on your Arduino. After installing the dino gem and hooking up the Ardunio, all that was left was to write a simple sketch and watch what happend.</p>

<p>By writing some Ruby and following a few syntax rules dino lays out, you can get an LED blinking in no time. And while this is a little underwhelming, I&rsquo;m hoping to create more interesting projects with this pairing as I begin to learn more.</p>

<br>


<h4>Here is the result of that labor:</h4>


<iframe class="vine-embed" src="https://vine.co/v/bL2wPqIgKPj/embed/simple" width="320" height="320" frameborder="0"></iframe>


<script async src="http://picodegallo.github.io//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>


<p></p>
]]></content>
  </entry>
  
</feed>
