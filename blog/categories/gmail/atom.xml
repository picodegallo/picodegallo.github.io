<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gmail | Mental Safari]]></title>
  <link href="http://picodegallo.github.io/blog/categories/gmail/atom.xml" rel="self"/>
  <link href="http://picodegallo.github.io/"/>
  <updated>2013-07-16T08:11:29-04:00</updated>
  <id>http://picodegallo.github.io/</id>
  <author>
    <name><![CDATA[Kristen Curtis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mentally Reframing Ruby â€“ Part 2]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2/"/>
    <updated>2013-06-10T22:08:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2</id>
    <content type="html"><![CDATA[<h2> What the What with the Gmail </h2>


<p>After my first experiment with Ruby and Arduino, I wanted to try writing a sketch that would build off of the code I had written from the blinking LED test. Using the blinking LED as an indicator, I thought it would be interesting to see if I could get my Ardunio talking with Gmail to alert me if I had any unread inbox messages. After doing some research, I found a Ruby gem called Gmail that allows me to do just that.</p>

<hr>




<h2> Requiring the Right Gems </h2>


<p>Here we&rsquo;re going to set up the sketch with the gems we&rsquo;ll be running.</p>

<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require &lsquo;bundler/setup&rsquo;
</span><span class="line">require &lsquo;gmail&rsquo;
</span><span class="line">require &lsquo;dino&rsquo;
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2> Board in the USA </h2>


<p>Dino requires us to define our board, tell it that we&rsquo;ll be inputing and outputing data, and tell it that we&rsquo;re using a serial connection (since my Ardunio is hooked up via USB). Next, we&rsquo;ll be defining our LED variable, which should be easy since it was in the previous sketch.Note: Dino also offers a good directory full of example code for setting up any given component.</p>

<h4>Setting up dino</h4>


<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">board = Dino::Board.new(Dino::TxRx::Serial.new)
</span><span class="line">led = Dino::Components::Led.new(pin: 13, board: board)
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2> You've Got Mail </h2>


<p>In the next few lines of code we: call on Gmail to let us access our inbox, check if our inbox is empty, set the led variable to a resting state, and define a variable equal to the number of unread emails. Note: In the code listed below, you&rsquo;d actually pass in your real email address and password.
<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Gmail.connect(&ldquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#117;&#x73;&#101;&#x72;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x75;&#115;&#101;&#x72;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>&rdquo;, &ldquo;password&rdquo;) do |gmail|
<span class="line">led.off
</span><span class="line">puts &ldquo;Total Unread Emails: #{gmail.inbox.count(:unread)}&rdquo;
</span><span class="line">has_unread = gmail.inbox.count(:unread) !=0
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2>Ruby Slippers</h2>


<p>Now that we have access to our inbox, we can finish up this sketch by writing an if statement to blink our led when our inbox is not at zero.</p>

<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if has_unread != 0
</span><span class="line">[:on, :off].cycle do |switch|
</span><span class="line">led.send(switch)
</span><span class="line">sleep 0.5
</span><span class="line">end
</span><span class="line">end
</span><span class="line">end
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2>Next Steps</h2>


<p>I&rsquo;m hoping to take this further by:</p>

<ul><li>Writting in a delay and loop so that the sketch runs every 5-10 min</li> 
<li> Adding an rgbLED so that I can light up a red LED when the inbox is full and a green LED when the inbox is empty.</li>
</ul>



]]></content>
  </entry>
  
</feed>
