<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | Mental Safari]]></title>
  <link href="http://picodegallo.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://picodegallo.github.io/"/>
  <updated>2013-06-27T23:03:17-04:00</updated>
  <id>http://picodegallo.github.io/</id>
  <author>
    <name><![CDATA[Kristen Curtis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Entropy]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/27/entropy/"/>
    <updated>2013-06-27T21:23:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/27/entropy</id>
    <content type="html"><![CDATA[<p>Every time I successfully launch something I wrote from the command line I like to celebrate by mentally singing along to some <a href="http://www.youtube.com/watch?v=Jm-upHSP9KU">Weird Science:</a> “Bits and pieces, bits and pieces. It’s my creation, is it reaaaal?” And then quickly follow up with, “Yes, yes it’s real!” before manically laughing at the birth of my creation. But tonight was slightly different – Post-song, I began thinking about the process of bringing information into existence and what that means in an age when so many of us are already suffering from information overload. Where did these bits and pieces come from?</p>

<hr>


<p>Luckily, I’m not the first to tackle such heady questions. In fact, there’s an entire field dedicated to the study of information theory. But my favorite introduction to the subject is science and technology author, James Gleick’s book, <a href="http://www.amazon.com/dp/1400096235">The Information.</a> Gleick masterfully paints a picture of the rich history of information, from the talking drums of Africa, to the written word, to the telegraph, to DNA, to quantum mechanics– all while weaving in the stories of the brilliant men and woman who pioneered the field, people such as Babbage, Lovelace, Turing, and Crick. But the star of the book is none other than my favorite autodidact, <a href="https://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon.</a></p>

<p>Shannon, who is credited with founding digital computer and digital circuit design in addition to information theory, ushered in the digital revolution by figuring out how to quantify information. Information, as it turns out, is a complex notion to define, let alone quantify, and yet it’s something that we all seem to naturally create. We’re all programmers in that sense, communicating in code – from creating words, to constructing alphabets, to abstracting these foundations into electrical signals. Creating information is, arguably, what we do best. The desire to create and communicate in order to manifest meaning is, well… life.</p>

<hr>


<p>Shannon began to notice that there were inherent patterns to the way we communicate. When these patterns, or messages, were separated from their meaning they could be translated into the language of mathematics, or what he referred to as “bits”. [Note: “bits” stands for binary digit, and is a term that was coined by <a href="http://en.wikipedia.org/wiki/John_Tukey">John Tukey,</a> though Shannon himself was the first ever to use it in print.] Expanding upon on this observation, Shannon hypothesized that communication must be riddled with redundancy. In order to test this theory he devised an <a href="http://what-if.xkcd.com/34/">experiment</a> in which he showed groups of people written words that were cut off at different points and asked them to guess what letter came next. By and large, people were able to guess the correct words. From this he concluded that if you were to strip away the unnecessary bits, you could <a href="http://en.wikipedia.org/wiki/Entropy_(information_theory)">compact a message</a> and still have it be readable – much like how we now write txt msgs.  Mathematically compacting a digital message in this way allows one to transmit information at a faster (and cheaper) rate. [All those compression algorithms you use everyday– yep – based on Shannon’s work.]</p>

<hr>


<p>While Shannon’s ideas ushered in a new wave of digital communication, not all of his contemporaries were pleased with the notion of messages without meaning. Though Shannon’s work was answering a problem of engineering, the implications of applying his work to a broader spectrum of disciplines meant sacrificing “the very quality that gives information its value and purpose.” Or as cybernetics historian, Jean-Pierre Dupey puts it, “…a paradox is at work here: ours is a world about which we pretend to have more and more information but which seems to us increasingly devoid of meaning.”</p>

<p>This sentiment is echoed in today’s world when we talk about how technology is making us feel <a href="http://www.amazon.com/Alone-Together-Expect-Technology-Other/dp/0465031463"> “alone together”</a>, or how we speak about <a href="http://www.fastcompany.com/3012521/unplug/baratunde-thurston-leaves-the-internet"> “unplugging” </a> ourselves to escape information overload.  And while more information may equate to more uncertainty within us, I ultimately feel that the balance between information and meaning is one we must struggle with in order to keep up with <a href="https://www.xkcd.com/1227/">the pace of modern life. </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design is NOT for Designers]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/16/design-is-not-for-designers/"/>
    <updated>2013-06-16T15:30:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/16/design-is-not-for-designers</id>
    <content type="html"><![CDATA[<h2>Becoming Multilingual</h2>


<p>
One thing that has always fascinated me about programming is the ability of programmers to become multilingual with their languages. You might know Ruby, but you also know quite a bit of SQL, or JS, or HTML, or even the nuances of using GitHub. The drive to learn more in order to build and communicate more is at the heart of the programming community itself. Even the structure and layout of a particular language, like Ruby, is governed by its own design language. Why then is it so freaking hard to find a nicely designed programming presentation on <a href= “http://speakerdeck.com”>Speaker Deck?</a>  Seriously, I just read 13 decks and only 3 of them were acceptably nice.</p>

<hr>




<h2>Design is a Language We All Speak</h2>


<p>You might think that design is for designers, but the truth is: we all know good design when we see it. Good design is simple, arresting, succinct, and above all communicates a SINGLE message. The same is true for a presentation: each slide should be communicating one thing. If you can’t sum up what that picture of you racing squirrels on slide 7 is doing in one short sentence – take it out. Or better yet, write that one short sentence and use it on your slide.</p>

<p> <hr></p>

<h2>Blackout the Rainbow</h2>


<p>Quit using every color Newton gave you. If you need inspiration for color swatches try <a href="https://kuler.adobe.com/explore/most-favorite/?time=month">Adobe Kuler</a> or if you hate Adobe, use <a href="http://www.colourlovers.com">Color Lovers.</a> The same lesson for colors should be applied to fonts. If you use more than two or three fonts (one for headlines, one for body, and one for emphasis) you&rsquo;re doing it wrong. If you need ideas for font pairings checkout: <a href="http://ifontyou.com">I Font You.</a></p>

<hr>




<h2>Resources</h2>


<p>If you&rsquo;re still confused about what a good presentation looks like, take a look at some of my favorites from the programming community on Speaker Deck:</p>

<ol>
  <li><a href="https://speakerdeck.com/ianbishop/lets-talk-about-ruby">Let's Talk About Ruby – Ian Bishop</a></li>
  <li><a href="https://speakerdeck.com/holman/how-to-build-a-github">How to Build a GitHub – Zach Holman</a></li>
  <li><a href="https://speakerdeck.com/kouphax/ruby-by-example">Ruby By Example – James Hughes</a></li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Reframing Ruby – Part 2]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2/"/>
    <updated>2013-06-10T22:08:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/10/mentally-reframing-ruby-part-2</id>
    <content type="html"><![CDATA[<h2> What the What with the Gmail </h2>


<p>After my first experiment with Ruby and Arduino, I wanted to try writing a sketch that would build off of the code I had written from the blinking LED test. Using the blinking LED as an indicator, I thought it would be interesting to see if I could get my Ardunio talking with Gmail to alert me if I had any unread inbox messages. After doing some research, I found a Ruby gem called Gmail that allows me to do just that.</p>

<hr>




<h2> Requiring the Right Gems </h2>


<p>Here we&rsquo;re going to set up the sketch with the gems we&rsquo;ll be running.</p>

<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require &lsquo;bundler/setup&rsquo;
</span><span class="line">require &lsquo;gmail&rsquo;
</span><span class="line">require &lsquo;dino&rsquo;
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2> Board in the USA </h2>


<p>Dino requires us to define our board, tell it that we&rsquo;ll be inputing and outputing data, and tell it that we&rsquo;re using a serial connection (since my Ardunio is hooked up via USB). Next, we&rsquo;ll be defining our LED variable, which should be easy since it was in the previous sketch.Note: Dino also offers a good directory full of example code for setting up any given component.</p>

<h4>Setting up dino</h4>


<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">board = Dino::Board.new(Dino::TxRx::Serial.new)
</span><span class="line">led = Dino::Components::Led.new(pin: 13, board: board)
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2> You've Got Mail </h2>


<p>In the next few lines of code we: call on Gmail to let us access our inbox, check if our inbox is empty, set the led variable to a resting state, and define a variable equal to the number of unread emails. Note: In the code listed below, you&rsquo;d actually pass in your real email address and password.
<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Gmail.connect(&ldquo;<a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#x75;&#x73;&#x65;&#x72;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x75;&#x73;&#101;&#114;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;, &ldquo;password&rdquo;) do |gmail|
<span class="line">led.off
</span><span class="line">puts &ldquo;Total Unread Emails: #{gmail.inbox.count(:unread)}&rdquo;
</span><span class="line">has_unread = gmail.inbox.count(:unread) !=0
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2>Ruby Slippers</h2>


<p>Now that we have access to our inbox, we can finish up this sketch by writing an if statement to blink our led when our inbox is not at zero.</p>

<p><figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if has_unread != 0
</span><span class="line">[:on, :off].cycle do |switch|
</span><span class="line">led.send(switch)
</span><span class="line">sleep 0.5
</span><span class="line">end
</span><span class="line">end
</span><span class="line">end
</code></pre></td></tr></tbody></table></div></figure></p>

<hr>




<h2>Next Steps</h2>


<p>I&rsquo;m hoping to take this further by:</p>

<ul><li>Writting in a delay and loop so that the sketch runs every 5-10 min</li> 
<li> Adding an rgbLED so that I can light up a red LED when the inbox is full and a green LED when the inbox is empty.</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Reframing Ruby – Part 1]]></title>
    <link href="http://picodegallo.github.io/blog/2013/06/09/mentally-reframing-ruby-part-1/"/>
    <updated>2013-06-09T15:53:00-04:00</updated>
    <id>http://picodegallo.github.io/blog/2013/06/09/mentally-reframing-ruby-part-1</id>
    <content type="html"><![CDATA[<h2> The Beginning </h2>


<p>Coming from a design background, I have a hard time understanding how something works or its purpose until I can see it applied to a real life situation. This is how I feel about learning Ruby. While I&rsquo;m becoming more familiar with the language day by day, I still needed an example of a practical application of it in order to wrap my head around when it&rsquo;s used.</p>

<p>In order to bring it all together, I decided to turn to an area I have a little bit of know-how in: physical computing. Ever since I was a kid, I&rsquo;ve wanted to take over the world – and that dream starts by having your very own robot army. While I don&rsquo;t have a large army to date, I have made a few small models with various microcontrollers, specifically with the ever popular Arduino. But, the Ardunio platform is based on a language (and environment) called Wiring, which is in turn based on C++ – quite a bit different from our pretty happy friend Ruby.</p>

<hr>


<h2> Experiment 1 </h2>


<p>So, I did a bit of research and found that someone had built a gem called dino last year for the exact purpose of running ruby sketches on your Arduino. After installing the dino gem and hooking up the Ardunio, all that was left was to write a simple sketch and watch what happend.</p>

<p>By writing some Ruby and following a few syntax rules dino lays out, you can get an LED blinking in no time. And while this is a little underwhelming, I&rsquo;m hoping to create more interesting projects with this pairing as I begin to learn more.</p>

<br>


<h4>Here is the result of that labor:</h4>


<iframe class="vine-embed" src="https://vine.co/v/bL2wPqIgKPj/embed/simple" width="320" height="320" frameborder="0"></iframe>


<script async src="http://picodegallo.github.io//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>


<p></p>
]]></content>
  </entry>
  
</feed>
